[project]
name = "ordeq-packages"
requires-python = ">=3.10"
version = "0.1.0"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "rust-just>=1.42.4",
]
lint = [
    "ruff>=0.14.2",
]
docs = [
    "mkdocs",
    "mkdocs-autoapi",
    "mkdocs-material",
    "mkdocs-material-extensions",
    "mkdocstrings[python]",
    "mkdocs-awesome-nav",
    "markdown",
    "pymdown-extensions",
    "ordeq_docs"
]
test = [
    "pytest-cov>=6.2.1",
    "pytest>=8.4.1",
]
types = [
    "mypy>=1.18.2",
    "ty>=0.0.1a25",
]

[tool.uv.sources]
ordeq = { workspace = true }
ordeq-altair = { workspace = true }
ordeq-args = { workspace = true }
ordeq-boto3 = { workspace = true }
ordeq-common = { workspace = true }
ordeq-cli-runner = { workspace = true }
ordeq-duckdb = { workspace = true }
ordeq-faiss = { workspace = true }
ordeq-files = { workspace = true }
ordeq-huggingface = { workspace = true }
ordeq-ibis = { workspace = true }
ordeq-joblib = { workspace = true }
ordeq-matplotlib = { workspace = true }
ordeq-numpy = { workspace = true }
ordeq-pandas = { workspace = true }
ordeq-polars = { workspace = true }
ordeq-manifest = { workspace = true }
ordeq-pydantic = { workspace = true }
ordeq-pymupdf = { workspace = true }
ordeq-requests = { workspace = true }
ordeq-sentence-transformers = { workspace = true }
ordeq-spark = { workspace = true }
ordeq-toml = { workspace = true }
ordeq-viz = { workspace = true }
ordeq-viz-cli = { workspace = true }
ordeq-yaml = { workspace = true }

# Development packages
ordeq-docs = { workspace = true }
ordeq-test-utils = { workspace = true }
ordeq-dev-tools = { workspace = true }

[tool.uv]
required-version = ">=0.8.23"

[tool.uv.workspace]
members = [
    "packages/*",
    "examples/*",
    "docs/"
]

[tool.coverage.paths]
source = ["packages/*/src"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "pass",
    "raise NotImplementedError",
]
fail_under = 85

[tool.coverage.run]
omit = [
    "_version.py",
    "packages/*/tests/resources/*",
    "packages/*/tests/snapshots/*",
]

[tool.pytest.ini_options]
addopts = "--doctest-modules --import-mode=importlib"
markers = [
    "docker: marks tests that require (deselect with '-m \"not docker\"')",
    "snapshot: marks tests that use snapshot testing (deselect with '-m \"not snapshot\"')",
]
norecursedirs = ["build", "resources"]
pythonpath = ["src", "tests"]

[tool.ruff]
exclude = [
    "packages/*/src/*/_version.py",
]
force-exclude = true
line-length = 79
preview = true
target-version = "py310"

[tool.ruff.format]
skip-magic-trailing-comma = true
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "A",
    "AIR",
    "ASYNC",
    "B",
    "C4",
    #  "D102",  # TODO: enable
    "D103",
    "D212",
    "D301",
    "D410",
    "D411",
    "D414",
    "D416",
    "D417",
    "DOC",
    "E",
    "ERA",
    "EXE",
    "FA",
    #  "FIX",  # TODO: enable
    "FURB",
    "G",
    "I",
    "ICN",
    "INP",
    "ISC",
    "LOG",
    "NPY",
    "PERF",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "TC",
    "UP",
    "W",
]
ignore = [
    "EM102", # f string in exception
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLR0915", # Too many statements (61 > 50)
    "PLR0914", # Too many local variables (22 > 15)
    "TC003", # Move standard library import
    "TC002", # Move third-party import `airflow.models.param.Param`
    "PLR0917", # Too many positional arguments (6/5)
    "PLR6301", # Method `...` could be a function, class method, or static method
    "PLR0912", # Too many branches (13 > 12)
    "S301", # Pickle
    "S403", # Pickle
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
# Rules not applicable for package tests
"packages/*/tests/*" = [
    "ANN201",
    "D",
    "DOC",
    "INP",
    "PLC2701",
    # `import` should be at the top-level of a file
    "PLC0415",
    "PLR6301",
    "S101",
    "S608",
    "SLF",
]
# Rules not applicable for example tests
"examples/*/tests/*" = [
    "ANN201",
    "D",
    "DOC",
    "INP",
    "PLC2701",
    # `import` should be at the top-level of a file
    "PLC0415",
    "PLR6301",
    "S101",
    "S608",
    "SLF",
]
# Rules not applicable for types.py
"packages/ordeq/src/ordeq/types.py" = [
    "ANN201",
    "D",
    "DOC",
    "PLC2701",
    "PLR6301",
]
# Rules not applicable for scripts
"scripts/*" = ["INP001", "S607", "S603", "S404", "D103"]
"scripts/generate_package_overview.py" = ["E501"]
# Rules not applicable in documentation files
"docs/*" = ["INP001", "D", "DOC", "S", "E501", "PERF", "PLW1514"]
"doccmd_kedro_md*.py" = [
    # Allow hardcoded secrets in documentation.
    "F821",
]
# Rules not applicable for some example projects
"examples/starter-single-file/*" = ["INP001", ]
"examples/integration-marimo/*" = ["PLC0415", "E501", "INP001"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ty.src]
exclude = [
    "packages/*/src/*/_version.py",
    # type checking on resources is conducted by snapshot tests
    "packages/*/tests/resources/*",
    "packages/*/tests/packages/*"
]

[tool.ty.rules]
invalid-argument-type = "ignore"
possibly-missing-attribute = "ignore"  # faiss issue
unresolved-attribute = "ignore"
no-matching-overload = "ignore"  # spark issue
